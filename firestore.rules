rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Helpers to check conversation participants for users and hosts
    function userConvHasParticipant(userId, convId) {
      return exists(/databases/$(database)/documents/users/$(userId)/conversations/$(convId)) &&
        get(/databases/$(database)/documents/users/$(userId)/conversations/$(convId)).data.participants.hasAny([request.auth.uid]);
    }

    function hostConvHasParticipant(hostId, convId) {
      return exists(/databases/$(database)/documents/hosts/$(hostId)/conversations/$(convId)) &&
        get(/databases/$(database)/documents/hosts/$(hostId)/conversations/$(convId)).data.participants.hasAny([request.auth.uid]);
    }

    // Users collection - users control their own document
    match /users/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;

      // Conversations under a user
      match /conversations/{convId} {
        allow read: if isSignedIn() && (
          request.auth.uid == userId || userConvHasParticipant(userId, convId)
        );

        allow create, update: if isSignedIn() && (
          request.auth.uid == userId ||
          (request.resource.data.participants is list && request.resource.data.participants.hasAny([request.auth.uid])) ||
          userConvHasParticipant(userId, convId)
        );

        allow delete: if isSignedIn() && request.auth.uid == userId;

        match /messages/{messageId} {
          allow read: if isSignedIn() && (
            request.auth.uid == userId || userConvHasParticipant(userId, convId)
          );

          allow create: if isSignedIn() && (
            request.resource.data.from == request.auth.uid &&
            (request.auth.uid == userId || userConvHasParticipant(userId, convId))
          );

          allow update, delete: if isSignedIn() && resource.data.from == request.auth.uid;
        }
      }
    }

    // Hosts collection - hosts control their data
    match /hosts/{hostId} {
      // listings
      match /listings/{listingId} {
        allow read: if true;
        allow write: if isSignedIn() && request.auth.uid == hostId;
      }

      // bookings under a host
      match /bookings/{bookingId} {
        allow read: if isSignedIn() && (
          request.auth.uid == hostId ||
          (resource.data.guestId == request.auth.uid) ||
          (request.resource.data.guestId == request.auth.uid)
        );

        allow create: if isSignedIn() && request.auth.uid == request.resource.data.guestId;
        allow update: if isSignedIn() && (
          request.auth.uid == hostId || (resource.data.guestId == request.auth.uid)
        );
        allow delete: if isSignedIn() && (
          request.auth.uid == hostId || (resource.data.guestId == request.auth.uid)
        );
      }

      // draft listings (hosts only)
      match /drafts/{draftId} {
        allow read, write: if isSignedIn() && request.auth.uid == hostId;
      }

      // host-side conversations and messages
      match /conversations/{convId} {
        allow read: if isSignedIn() && (
          request.auth.uid == hostId || hostConvHasParticipant(hostId, convId)
        );

        allow create, update: if isSignedIn() && (
          request.auth.uid == hostId ||
          (request.resource.data.participants is list && request.resource.data.participants.hasAny([request.auth.uid])) ||
          hostConvHasParticipant(hostId, convId)
        );

        allow delete: if isSignedIn() && request.auth.uid == hostId;

        match /messages/{messageId} {
          allow read: if isSignedIn() && (
            request.auth.uid == hostId || hostConvHasParticipant(hostId, convId)
          );

          allow create: if isSignedIn() && (
            request.resource.data.from == request.auth.uid &&
            (request.auth.uid == hostId || hostConvHasParticipant(hostId, convId))
          );

          allow update, delete: if isSignedIn() && resource.data.from == request.auth.uid;
        }
      }
    }

    // Reviews (authenticated users)
    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Admin-only analytics
    match /analytics/{document=**} {
      allow read, write: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
